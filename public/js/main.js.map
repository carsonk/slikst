{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.js","sourcesContent":["// CSRF token\nvar _token = $('meta[name=_token]').attr('content');\n\n$(document).ready(function() {\n    // Error Creation\n\n    /**\n     * Creates a floating error.\n     * @param  string message     The message to show.\n     * @param  int persistTime    The amount of time the error should persist.\n     * @return void\n     */\n    function float_error(message, persistTime) {\n        if(typeof message === 'undefined' || persistTime < 0)\n        {\n            return false;\n        }\n\n        var source = $(\"#float-error-template\").html();\n        var template = Handlebars.compile(source);\n        var html = template({message: message});\n\n        $(\".float-error\").fadeOut().remove(); // Removes any current float-errors.\n        $(\"body\").append(html);\n        $(\".float-error\").fadeIn(1000);\n\n        if(typeof persistTime === 'number' && persistTime > 0)\n        {\n            setTimeout(function() {\n                $(\".float-error\").hide();\n            }, (persistTime / 1000));\n        }\n    }\n\n    /**\n     * Handles suggestions fields and grabbing.\n     */\n    function SuggestionsManager()\n    {\n        var suggestionsInputs = $(\".suggestion-input\");\n        var suggestionItemTemplate = Handlebars.compile('<li class=\"suggestion-item list-group-item\" data-item-id=\"{{id}}\">{{ name }}</li>');\n\n        /**\n         * Initiates suggestions fields.\n         * @return void\n         */\n        this.init = function() {\n            this.watchInputFields();\n            this.watchSuggestionClicks();\n        };\n\n        /**\n         * Watches for input and loads suggestions from server.\n         * @private\n         * @return void\n         */\n        this.watchInputFields = function() {\n            suggestionsInputs.doneTyping(function(event) {\n                var inputElement = $(this);\n                var submitToUrl = inputElement.data('suggestion-submit-to');\n                var suggestionsContainer = inputElement.closest('.suggestion-container');\n                var suggestionsList = suggestionsContainer.find('.suggestion-list');\n                var returnFieldName = inputElement.data('return-field');\n\n                console.debug('Fetching suggestions from ' + submitToUrl + ' for field name ' + returnFieldName + ' with query \"' + inputElement.val() + '\"');\n\n                $.post(submitToUrl, { query: inputElement.val(), _token: _token }, function(data) {\n                    console.debug('Processing returned data.');\n\n                    if(returnFieldName in data) {\n                        suggestionsList.empty();\n\n                        if(data[returnFieldName].length > 0) {\n                            suggestionsList.slideDown();\n\n                            $.each(data[returnFieldName], function(key, value) {\n                                var templateContext = { id: value.id, name: value.name };\n                                var newListItem = suggestionItemTemplate(templateContext);\n                                suggestionsList.append(newListItem);\n                            });\n                        } else {\n                            suggestionsList.slideUp(); // Hide if there are no results.\n                            // TODO: Have a \"no results\" message appear.\n                            console.debug('No suggestions provided for ' + returnFieldName);\n                        }\n                    } else {\n                        console.debug('Unable to grab suggestions data.');\n                        float_error(\"Unable to grab suggestions data.\");\n                    }\n                }, \"json\")\n                .fail(function() {\n                    float_error(\"Unable to grab suggestions data.\");\n                });\n            });\n        };\n\n        /**\n         * Watches for clicks on the items.\n         * @return void\n         */\n        this.watchSuggestionClicks = function() {\n            $(\".suggestion-list\").on(\"click\", \".suggestion-item\", function() {\n                var clickedElement = $(this);\n                var item = {\n                    id: clickedElement.data('item-id'),\n                    name: clickedElement.text()\n                };\n\n                var suggestionsList = clickedElement.parent();\n                suggestionsList.hide();\n\n                var suggestionsContainer = clickedElement.closest('.suggestion-container');\n\n                var suggestionsInput = suggestionsContainer.find('.suggestion-input');\n                var suggestionsId = suggestionsContainer.find('.suggestion-id');\n\n                suggestionsInput.val(item.name);\n                suggestionsId.val(item.id);\n                suggestionsInput.attr(\"readonly\", true);\n            });\n        };\n    }\n\n    // Creates instance of suggestions manager and initiates it.\n    var suggestionsManager = new SuggestionsManager();\n    suggestionsManager.init();\n\n});\n"],"sourceRoot":"/source/"}